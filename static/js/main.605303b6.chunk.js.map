{"version":3,"sources":["logo.svg","movie.js","navi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MoviePoster","poster","alt","className","src","title","MovieGenre","genre","Movie","genres","synopsis","map","index","key","NavigationBar","App","state","getMovies","a","callApi","movies","setState","renderMovies","movie","large_cover_image","id","fetch","then","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,2MC0B3C,SAASC,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,IAC7B,OACE,yBAAKC,UAAU,iBACX,yBAAKC,IAAKH,EAAQC,IAAKA,EAAKG,MAAOH,EAAKC,UAAU,eAClD,wBAAIA,UAAY,qBAAsBD,IAK9C,SAASI,EAAT,GAAgC,IAAVC,EAAS,EAATA,MACpB,OAAO,0BAAMJ,UAAU,gBAAgBI,GAmB1BC,MAnDf,YAAqD,IAApCH,EAAmC,EAAnCA,MAAOJ,EAA4B,EAA5BA,OAAQQ,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACtC,OACE,yBAAKP,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAACH,EAAD,CAAaC,OAAQA,EAAQC,IAAKG,KAGpC,yBAAKF,UAAU,iBACb,4BAAKE,GACL,yBAAKF,UAAU,iBACZM,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OACV,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAGnC,yBAAKT,UAAU,mBACb,2BAAIO,OCTCI,G,MARO,WAClB,OACI,gCACI,yBAAKX,UAAY,qBC+CdY,E,4MA7CbC,MAAO,G,EAYPC,U,sBAAY,4BAAAC,EAAA,sEACW,EAAKC,UADhB,OACJC,EADI,OAEV,EAAKC,SAAS,CACZD,WAHQ,2C,EAQZE,aAAe,WAIb,OAHe,EAAKN,MAAMI,OAAOT,KAAI,SAAAY,GACnC,OAAO,kBAAC,EAAD,CAAOlB,MAAOkB,EAAMlB,MAAOJ,OAAQsB,EAAMC,kBAAmBX,IAAKU,EAAME,GAAIhB,OAAQc,EAAMd,OAAQC,SAAUa,EAAMb,e,EAK5HS,QAAU,WACR,OAAOO,MAAM,yDACZC,MAAK,SAAAJ,GAAK,OAAIA,EAAMK,UACpBD,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKT,UACvBU,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,gHAtBxBG,KAAKjB,c,+BA2BP,OACA,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACC+B,KAAKlB,MAAMI,OAASc,KAAKZ,eAAe,c,GAxC7Ba,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.605303b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport \"./movie.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} alt={title}>            \r\n        </MoviePoster>\r\n      </div>\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <p>{synopsis}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n  return (\r\n    <div className=\"Movie__Poster\">\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Img\"/>\r\n        <h1 className = \"Movie__InnerTitle\" >{alt}</h1>\r\n    </div>        \r\n  );\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie__Genre\">{genre}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired,\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport \"./navi.css\";\r\nconst NavigationBar = () =>{\r\n    return(\r\n        <header>\r\n            <nav className = \"NavigationBar\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import React,{Component} from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Movie from \"./movie\";\r\nimport NavigationBar from \"./navi\";\r\n\r\nclass App extends Component {\r\n  state ={\r\n  \r\n  }\r\n  //라이프사이클 마운트전\r\n  componentWillMount(){\r\n    \r\n  }\r\n  //라이프사이클 마운트후\r\n  componentDidMount(){\r\n      this.getMovies();\r\n  }\r\n\r\n  getMovies = async () => {\r\n    const movies = await this.callApi();\r\n    this.setState({\r\n      movies\r\n    });\r\n  };\r\n\r\n  //\r\n  renderMovies = () =>{\r\n    const movies = this.state.movies.map(movie=> {\r\n      return <Movie title={movie.title} poster={movie.large_cover_image} key={movie.id} genres={movie.genres} synopsis={movie.synopsis} />;\r\n    })\r\n    return movies\r\n  } \r\n\r\n  callApi = () =>{\r\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\")\r\n    .then(movie => movie.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n    <div className=\"App\">\r\n      <NavigationBar></NavigationBar>\r\n      {this.state.movies ? this.renderMovies():\"loding\" }\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}