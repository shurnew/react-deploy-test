{"version":3,"sources":["img/1.jpg","img/2.jpg","img/3.jpg","logo.svg","components/movie.js","components/navi.js","components/Slide.js","components/SlideMenu.js","components/Subject.js","components/SeachBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","index","MovieGenres","key","src","defaultProps","NavigationBar","SlideIMG","text","img","Container","Title","IMG","styled","div","h1","SliderContainer","button","Slider","useState","currentSlide","setCurrentSlide","slideRef","useRef","nextSlide","useEffect","current","style","transition","transform","setTimeout","ref","img1","img2","img3","Subject","class","type","SeachBox","firebase","require","App","state","getMovies","a","callApi","movies","setState","renderMovies","movie","title_english","large_cover_image","id","console","log","fetch","then","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d444b132.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.e2780173.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.66734bc6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.b95e921c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./movie.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <h1>{title}</h1>\r\n      <div className=\"Movie__Colums\">\r\n        <MoviePoster poster={poster} alt ={title} />\r\n      </div>\r\n      <div className=\"Movie__Colums\">\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genres, index) => (\r\n            <MovieGenres genres={genres} key={index}></MovieGenres>\r\n          ))}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">{synopsis}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MoviePoster({ poster,alt }) {\r\n  return <img alt={alt} title={alt} src={poster} className=\"Movie__Poster\" />;\r\n}\r\nfunction MovieGenres({ genres }) {\r\n  return <span className=\"Movie__Genres\">{genres}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired,\r\n};\r\n\r\nMovie.defaultProps = {\r\n  title: \"영화이름\",\r\n  poster: \"https://www.flaticon.com/svg/static/icons/svg/1596/1596476.svg\",\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieGenres.propTypes = {\r\n  genres: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport \"./navi.css\";\r\nconst NavigationBar = () =>{\r\n    return(\r\n        <header>\r\n            <nav className = \"NavigationBar\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default NavigationBar;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nexport default function SlideIMG({ text,img }) {\r\n  return (\r\n    <Container>      \r\n      <Title>{text}</Title>\r\n      <IMG src={img} />      \r\n    </Container>\r\n  );\r\n}\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 40vh;\r\n`;\r\nconst IMG = styled.img`\r\n  width: 100vw;\r\n  height: inherit ;\r\n  object-fit: cover;\r\n  z-index: 1;\r\n`;\r\nconst Title = styled.h1`\r\n  z-index: 10;\r\n  position: absolute;\r\n  display: inline;\r\n  width: 100%;  \r\n  color: #f2f2f2;\r\n  text-align: center;\r\n  margin-top: 4em;\r\n`;\r\n\r\n\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Slide from \"./Slide\";\r\nimport styled from \"styled-components\";\r\nimport img1 from \"./../img/1.jpg\";\r\nimport img2 from \"./../img/2.jpg\";\r\nimport img3 from \"./../img/3.jpg\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;  \r\n  overflow: hidden; // 선을 넘어간 이미지들은 보이지 않도록 처리합니다.\r\n`;\r\nconst Button = styled.button`\r\nheight: 15px;\r\nwidth: 15px;\r\nbackground-color: #bbb;\r\nborder-radius: 50%;\r\ndisplay: inline;\r\ntransition: background-color 0.6s ease;\r\nposition: absolute;\r\n\r\n  &:hover {\r\n    transition: all 0.3s ease-in-out;\r\n    background-color: coral;\r\n    color: #fff;\r\n  }\r\n`;\r\nconst SliderContainer = styled.div`\r\n  width: 100%;\r\n  display: flex; //이미지들을 가로로 나열합니다.\r\n`;\r\n\r\nconst TOTAL_SLIDES = 2;\r\nexport default function Slider() {\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  const slideRef = useRef(null);\r\n  const nextSlide = () => {\r\n    if (currentSlide >= TOTAL_SLIDES) {\r\n      // 더 이상 넘어갈 슬라이드가 없으면 슬라이드를 초기화합니다.\r\n      setCurrentSlide(0);\r\n    } else {\r\n      setCurrentSlide(currentSlide + 1);\r\n    }\r\n  };\r\n  const Sliding = () => {\r\n    setTimeout(nextSlide,5000)\r\n  };\r\n  useEffect(() => {\r\n    slideRef.current.style.transition = \"all 0.5s ease-in-out\";\r\n    slideRef.current.style.transform = `translateX(-${currentSlide}00%)`; // 백틱을 사용하여 슬라이드로 이동하는 애니메이션을 만듭니다.\r\n    Sliding()\r\n}, [currentSlide]);\r\n  return (    \r\n    <Container>              \r\n      <SliderContainer ref={slideRef}>\r\n        <Slide img={img1} text={\"이 음식은 맛있어요!\"}/>\r\n        <Slide img={img2} text={\"리뷰를 공유해보세요!\"} />\r\n        <Slide img={img3} text={\"제품 체험단 모집중!\"}/>\r\n      </SliderContainer>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Subject.css\";\r\n\r\nconst Subject = () => {\r\n  return (\r\n    <div class=\"buttons buttons2\">\r\n      <button type=\"button\" class=\"button8\">\r\n        IT기기\r\n      </button>\r\n      <button type=\"button\" class=\"button8\">\r\n        영화\r\n      </button>\r\n      <button type=\"button\" class=\"button8\">\r\n        음식\r\n      </button>\r\n      <button type=\"button\" class=\"button8\">\r\n        가전\r\n      </button>\r\n      <button type=\"button\" class=\"button8\">\r\n        자동차\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Subject;\r\n","import React from \"react\";\r\nimport \"./SeachBox.css\";\r\nimport Subject from \"./Subject\";\r\n\r\nconst SeachBox = () => {\r\n  return (\r\n    <div className = \"box\">\r\n      <form className = \"box2\">\r\n        <fieldset>\r\n          <input className=\"search\" type=\"search\" />\r\n          <button className=\"submit\" type=\"submit\">\r\n            <i class=\"fa fa-search\"></i>\r\n          </button>\r\n        </fieldset>\r\n      </form>            \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeachBox;\r\n","import React,{Component} from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Movie from \"./components/movie\";\r\nimport NavigationBar from \"./components/navi\";\r\nimport Slide from \"./components/SlideMenu\";\r\nimport Subject from \"./components/Subject\";\r\nimport SeachBox from \"./components/SeachBox\";\r\n\r\nvar firebase = require(\"firebase\");\r\nclass App extends Component {\r\n  state ={\r\n  \r\n  }\r\n  //라이프사이클 마운트전\r\n  componentWillMount(){\r\n    \r\n  }\r\n  //라이프사이클 마운트후\r\n  componentDidMount(){\r\n    this.getMovies();\r\n  }\r\n\r\n  getMovies = async () => {\r\n    const movies = await this.callApi();\r\n    this.setState({\r\n      movies\r\n    });\r\n  };\r\n\r\n  renderMovies = () =>{\r\n    const movies = this.state.movies.map((movie, index) => {\r\n      return <Movie \r\n        title={movie.title_english} \r\n        poster={movie.large_cover_image} \r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n        />;\r\n    })\r\n    return movies\r\n  } \r\n\r\n  callApi = () =>{\r\n    console.log(firebase)\r\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?sort_by=rating\")\r\n    .then(movie => movie.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n    <div className=\"App\">\r\n      <NavigationBar></NavigationBar>\r\n      <Slide></Slide>\r\n      <SeachBox></SeachBox>\r\n      <Subject></Subject>\r\n      <div className = \"Posts\">\r\n        {this.state.movies ? this.renderMovies():\"loding\" }\r\n      </div>\r\n      \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}